"use strict";var board,resetButton=document.querySelector(".reset"),playerO="O",playerX="X",currPlayer=playerO,gameOver=!1;function creatingGame(){board=[[" "," "," "],[" "," "," "],[" "," "," "]];for(var e=0;e<3;e++)for(var r=0;r<3;r++){var t=document.createElement("div");t.id=e.toString()+"-"+r.toString(),t.classList.add("area"),0!=e&&1!=e||t.classList.add("horizontal-line"),0!=r&&1!=r||t.classList.add("vertical-line"),t.addEventListener("click",setNewArea),document.getElementById("board").appendChild(t)}}function setNewArea(){var e,r;gameOver||(r=this.id.split("-"),e=parseInt(r[0]),r=parseInt(r[1])," "==board[e][r]&&(board[e][r]=currPlayer,currPlayer=(this.innerText=currPlayer)==playerO?playerX:playerO,checkWinner()))}function checkWinner(){for(var e=0;e<3;e++)if(board[e][0]==board[e][1]&&board[e][1]==board[e][2]&&" "!=board[e][0]){for(var r=0;r<3;r++)document.getElementById(e.toString()+"-"+r.toString()).classList.add("winner"),resetButton.addEventListener("click",reset);return void(gameOver=!0)}for(var t=0;t<3;t++)if(board[0][t]==board[1][t]&&board[1][t]==board[2][t]&&" "!=board[0][t]){for(var a=0;a<3;a++)document.getElementById(a.toString()+"-"+t.toString()).classList.add("winner");return void(gameOver=!0)}if(board[0][0]==board[1][1]&&board[1][1]==board[2][2]&&" "!=board[0][0]){for(var d=0;d<3;d++)document.getElementById(d.toString()+"-"+d.toString()).classList.add("winner");gameOver=!0}else board[0][2]==board[1][1]&&board[1][1]==board[2][0]&&" "!=board[0][2]&&(document.getElementById("0-2").classList.add("winner"),document.getElementById("1-1").classList.add("winner"),document.getElementById("2-0").classList.add("winner"),gameOver=!0)}window.onload=function(){creatingGame()},resetButton.addEventListener("click",function(){document.location.reload(!0)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJwbGF5ZXJYIiwicmVzZXRCdXR0b24iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwbGF5ZXJPIiwiYm9hcmQiLCJjdXJyUGxheWVyIiwiY3JlYXRpbmdHYW1lIiwiYSIsImIiLCJjbGFzc0xpc3QiLCJhZGQiLCJjcmVhdGVFbGVtZW50IiwiYXJlYSIsImlkIiwidG9TdHJpbmciLCJhZGRFdmVudExpc3RlbmVyIiwic2V0TmV3QXJlYSIsImdldEVsZW1lbnRCeUlkIiwiYXBwZW5kQ2hpbGQiLCJjb29yZHMiLCJ0aGlzIiwic3BsaXQiLCJwYXJzZUludCIsImlubmVyVGV4dCIsImNoZWNrV2lubmVyIiwidGlsZSIsImdhbWVPdmVyIiwiaSIsInJlc2V0Iiwid2luZG93Iiwib25sb2FkIl0sIm1hcHBpbmdzIjoiYUFBQSxJQUVNQSxNQUZBQyxZQUFjQyxTQUFTQyxjQUFjLFFBQVEsRUFDN0NDLFFBQVUsSUFEVkgsUUFBVyxJQUliSSxXQUFLRCxRQUNMRSxTQUFVLENBQUEsRUFhZCxTQUFTQyxlQUVMRixNQUNLLENBQUQsQ0FBQyxJQUFLLElBQUssS0FLZixDQUFBLElBQUEsSUFBQSxLQUNLLENBQUEsSUFBSyxJQUFPLE1BQWpCLElBQUssSUFBSUcsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLENBQUMsR0FLaEIsSUFBQSxJQUFBQyxFQUFBLEVBQUFBLEVBQUEsRUFBQUEsQ0FBQSxHQUFBLENBRUtDLElBQUFBLEVBQVVDLFNBQVdDLGNBQUEsS0FBQSxFQUdyQkMsRUFBS0MsR0FBS04sRUFBQU8sU0FBTyxFQUFBLElBQUFOLEVBQUFNLFNBQUEsRUFDZEYsRUFBQ0gsVUFBY0MsSUFBQSxNQUFBLEVBR2RELEdBQUFBLEdBQWMsR0FBREYsR0FDdEJLLEVBQUFILFVBQUFDLElBQUEsaUJBQUEsRUFFQSxHQUFBRixHQUFBLEdBQUFBLEdBQ0tPLEVBQUFBLFVBQWlCTCxJQUFPLGVBQWEsRUFJOUNFLEVBQUFHLGlCQUFBLFFBQUFDLFVBQUEsRUFJQ0EsU0FBVUMsZUFBRyxPQUFBLEVBQUFDLFlBQUFOLENBQUEsQ0FDbEIsQ0FISixDQUVBLFNBQVNJLGFBT0wsSUFDSVQsRUFPSkMsRUFSSVcsV0FNSkEsRUFBQUMsS0FBQVAsR0FBQVEsTUFBQSxHQUFBLEVBTElkLEVBQUllLFNBQVNILEVBQU8sRUFBRSxFQU8xQlgsRUFBQWMsU0FBQUgsRUFBQSxFQUFBLEVBRWlCZCxLQUFaa0IsTUFBQUEsR0FBU2YsS0FLYkosTUFBTUcsR0FBQUMsR0FBQUgsV0FLUG1CLFlBSkluQixLQUFBQSxVQUFhRixhQUdqQkEsUUFDYUosUUFHR0ksUUFIaEJxQixZQVdRLEdBVlosQ0FFQSxTQWFnQkMsY0FYWixJQWFRLElBQUFsQixFQUFBLEVBQUFBLEVBQUEsRUFBQUEsQ0FBQSxHQUNBbUIsR0FDQXRCLE1BQUFHLEdBQUEsSUFBQUgsTUFBQUcsR0FBQSxJQUNKSCxNQUFBRyxHQUFBLElBQUFILE1BQUFHLEdBQUEsSUFDSixLQUFBSCxNQUFBRyxHQUFBLEdBWk0sQ0FlSSxJQUFJLElBQUdvQixFQUFNbkIsRUFBR21CLEVBQUUsRUFBQUEsQ0FBQSxHQUVMdkIsU0FBV2EsZUFJMUJWLEVBQUFPLFNBQUEsRUFBQSxJQUFBYSxFQUFBYixTQUFBLENBQUEsRUFFZWIsVUFBU2dCLElBQUFBLFFBQWMsRUFHN0JSLFlBQWNNLGlCQUFTLFFBQUFhLEtBQUEsRUFHaEMsT0FEQUYsS0FBQUEsU0FBZSxDQUFBLEVBRW5CLENBSUosSUFDSXRCLElBQU9JLEVBQUksRUFBQUEsRUFBSUosRUFBTUksQ0FBQyxHQUl0QixHQUNLSixNQUFLLEdBQUlJLElBQUdKLE1BQU11QixHQUFHbkIsSUFDbEJpQixNQUFJLEdBQUd4QixJQUFRRyxNQUFDYSxHQUFBQSxJQUdELEtBQWZiLE1BQUNLLEdBQUFBLEdBQ1QsQ0FFQSxJQUFBLElBQUFrQixFQUFBLEVBQUFBLEVBQUEsRUFBQUEsQ0FBQSxHQUNKMUIsU0FBQWdCLGVBeEJnQlUsRUFBRWIsU0FBUSxFQUFLLElBQU1OLEVBQUVNLFNBQVEsQ0FBRSxFQTRCOUJWLFVBQVVNLElBQUMsUUFDbkIsRUFLRkQsT0FERGdCLEtBQUFBLFNBQU94QixDQUFBQSxFQTNCWCxDQUlKLEdBOEJJRyxNQUFBLEdBQUEsSUFBQUEsTUFBQSxHQUFBLElBQ0FxQixNQUFPeEIsR0FBQUEsSUFBU2dCLE1BQUFBLEdBQUFBLElBQ0RQLEtBQWZlLE1BQUtoQixHQUFBQSxHQWhDVCxDQW9DQSxJQUFBLElBQUFrQixFQUFBLEVBQUFBLEVBQUEsRUFBQUEsQ0FBQSxHQUNKMUIsU0FBQWdCLGVBN0JnQlUsRUFBRWIsU0FBUSxFQUFLLElBQU1hLEVBQUViLFNBQVEsQ0FBRSxFQUVoQ0wsVUFBVUMsSUFBSSxRQUFRLEVBRS9CZ0IsU0FBVyxDQUFBLENBRWYsTUFJSXRCLE1BQU0sR0FBRyxJQUFNQSxNQUFNLEdBQUcsSUFDeEJBLE1BQU0sR0FBRyxJQUFNQSxNQUFNLEdBQUcsSUFDVCxLQUFmQSxNQUFNLEdBQUcsS0FHRUgsU0FBU2dCLGVBQWUsS0FBSyxFQUNuQ1IsVUFBVUMsSUFBSSxRQUFRLEVBR3BCVCxTQUFTZ0IsZUFBZSxLQUFLLEVBQy9CUixVQUFVQyxJQUFJLFFBQVEsRUFHcEJULFNBQVNnQixlQUFlLEtBQUssRUFDL0JSLFVBQVVDLElBQUksUUFBUSxFQUUzQmdCLFNBQVcsQ0FBQSxFQUduQixDQXpKQUcsT0FBQUMsT0FBQSxXQUNBRCxhQUFnQixDQUVoQixFQUVBN0IsWUFBQWUsaUJBQUEsUUFBQSxXQUNBZixTQUFZZSxTQUFBQSxPQUFpQixDQUFBLENBQUEsQ0FFN0IsQ0FBQyIsImZpbGUiOiJzY3JpcHQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVzZXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlc2V0XCIpO1xyXG5jb25zdCBwbGF5ZXJPID0gXCJPXCI7XHJcbmNvbnN0IHBsYXllclggPSBcIlhcIjtcclxuXHJcbmxldCBib2FyZDtcclxubGV0IGN1cnJQbGF5ZXIgPSBwbGF5ZXJPO1xyXG5sZXQgZ2FtZU92ZXIgPSBmYWxzZTtcclxuXHJcbi8vIEZ1bmN0aW9uIGNhbGwgOlxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY3JlYXRpbmdHYW1lKCk7XHJcbn07XHJcblxyXG4vLyBSZXNldCBidXR0b24sIGFuZCBhZ2FpbiBnYW1lIDpcclxucmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGluZ0dhbWUoKSB7XHJcbiAgICAvLyBDcmVhdGUgYSBmaWVsdHMgOlxyXG4gICAgYm9hcmQgPSBbXHJcbiAgICAgICAgW1wiIFwiLCBcIiBcIiwgXCIgXCJdLFxyXG4gICAgICAgIFtcIiBcIiwgXCIgXCIsIFwiIFwiXSxcclxuICAgICAgICBbXCIgXCIsIFwiIFwiLCBcIiBcIl0sXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIENvdW50aW5nIHRoZSBmaWVsZCB0aHJvdWdoIHRoZSB4IGFuZCB5IGF4ZXMgOlxyXG4gICAgZm9yIChsZXQgYSA9IDA7IGEgPCAzOyBhKyspIHtcclxuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IDM7IGIrKykge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgc2luZ2xlIGZpZWxkIGFuZCBhZGQgc3R5bGUgZnJvbSBDU1MgOlxyXG4gICAgICAgICAgICBsZXQgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgICAgICAgICAvLyBOZXcgdmFyaWFibGUgY2FuIG1vdmUgYXJvdW5kIHRoZSBmaWVsZCA6XHJcbiAgICAgICAgICAgIGFyZWEuaWQgPSBhLnRvU3RyaW5nKCkgKyBcIi1cIiArIGIudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgYXJlYS5jbGFzc0xpc3QuYWRkKFwiYXJlYVwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vICBDcmVhdGUgaG9yaXpvbnRhbCBhZG4gdmVydGljYWwgOlxyXG4gICAgICAgICAgICBpZiAoYSA9PSAwIHx8IGEgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgYXJlYS5jbGFzc0xpc3QuYWRkKFwiaG9yaXpvbnRhbC1saW5lXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChiID09IDAgfHwgYiA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBhcmVhLmNsYXNzTGlzdC5hZGQoXCJ2ZXJ0aWNhbC1saW5lXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBXaGVuIGRpZCB5b3UgY2xpY2sgYXQgZmllbGQgOlxyXG4gICAgICAgICAgICBhcmVhLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzZXROZXdBcmVhKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFkZGluZyBzdHlsZXMgZnJvbSBjc3MgdG8gXCJib2FyZFwiIDpcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib2FyZFwiKS5hcHBlbmRDaGlsZChhcmVhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldE5ld0FyZWEoKSB7XHJcbiAgICAvLyBXaGVuIGl0IGNvbWVzIHRvIHdpbm5pbmcgOlxyXG4gICAgaWYgKGdhbWVPdmVyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENyZWF0ZSBjb29yZHMgZm9yIHBsYXllcnMgOlxyXG4gICAgbGV0IGNvb3JkcyA9IHRoaXMuaWQuc3BsaXQoXCItXCIpO1xyXG4gICAgbGV0IGEgPSBwYXJzZUludChjb29yZHNbMF0pO1xyXG4gICAgbGV0IGIgPSBwYXJzZUludChjb29yZHNbMV0pO1xyXG5cclxuICAgIGlmIChib2FyZFthXVtiXSAhPSBcIiBcIikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQbGF5ZXIgcGxhY2VtZW50IDpcclxuICAgIGJvYXJkW2FdW2JdID0gY3VyclBsYXllcjtcclxuICAgIHRoaXMuaW5uZXJUZXh0ID0gY3VyclBsYXllcjtcclxuXHJcbiAgICAvLyBXaGVuIHRoZSBwbGF5ZXIgZmlyc3Qgc3RhcnRzIDpcclxuICAgIGlmIChjdXJyUGxheWVyID09IHBsYXllck8pIHtcclxuICAgICAgICBjdXJyUGxheWVyID0gcGxheWVyWDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY3VyclBsYXllciA9IHBsYXllck87XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgd2hyZW4gZGlkIHlvdSB3aW5uZXIgOlxyXG4gICAgY2hlY2tXaW5uZXIoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tXaW5uZXIoKSB7XHJcbiAgICAvLyBIb3Jpem9udGFseSBjaGVjayBmb3IgMyByb3dzIDpcclxuICAgIGZvciAobGV0IGEgPSAwOyBhIDwgMzsgYSsrKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBib2FyZFthXVswXSA9PSBib2FyZFthXVsxXSAmJlxyXG4gICAgICAgICAgICBib2FyZFthXVsxXSA9PSBib2FyZFthXVsyXSAmJlxyXG4gICAgICAgICAgICBib2FyZFthXVswXSAhPSBcIiBcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBmb3VuZCB0aGUgd2lubmluZyByb3cgYXBwbHkgdGhlIHdpbm5lciBzdHlsZSA6XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICAgICAgICAgICAgICAgIGEudG9TdHJpbmcoKSArIFwiLVwiICsgaS50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGlsZS5jbGFzc0xpc3QuYWRkKFwid2lubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHJlc2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnYW1lT3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmVydGljYWxseSBjaGVjayBmb3IgMyBjb2x1bW46XHJcbiAgICBmb3IgKGxldCBiID0gMDsgYiA8IDM7IGIrKykge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgYm9hcmRbMF1bYl0gPT0gYm9hcmRbMV1bYl0gJiZcclxuICAgICAgICAgICAgYm9hcmRbMV1bYl0gPT0gYm9hcmRbMl1bYl0gJiZcclxuICAgICAgICAgICAgYm9hcmRbMF1bYl0gIT0gXCIgXCJcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgLy8gSWYgd2UgZm91bmQgdGhlIHdpbm5pbmcgY29sdW1uIGFwcGx5IHRoZSB3aW5uZXIgc3R5bGUgOlxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRpbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgICAgICAgICAgICAgICBpLnRvU3RyaW5nKCkgKyBcIi1cIiArIGIudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRpbGUuY2xhc3NMaXN0LmFkZChcIndpbm5lclwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnYW1lT3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGlhZ29uYWxseSBjaGVjayA6XHJcbiAgICBpZiAoXHJcbiAgICAgICAgYm9hcmRbMF1bMF0gPT0gYm9hcmRbMV1bMV0gJiZcclxuICAgICAgICBib2FyZFsxXVsxXSA9PSBib2FyZFsyXVsyXSAmJlxyXG4gICAgICAgIGJvYXJkWzBdWzBdICE9IFwiIFwiXHJcbiAgICApIHtcclxuICAgICAgICAvLyBJZiB3ZSBmb3VuZCB0aGUgd2lubmluZyBkaWFnb25hbGx5IGFwcGx5IHRoZSB3aW5uZXIgc3R5bGUgOlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0aWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgICAgICAgICAgICBpLnRvU3RyaW5nKCkgKyBcIi1cIiArIGkudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aWxlLmNsYXNzTGlzdC5hZGQoXCJ3aW5uZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhbWVPdmVyID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQW50aS1kaWFnb25hbGx5IGNoZWNrIDpcclxuICAgIGlmIChcclxuICAgICAgICBib2FyZFswXVsyXSA9PSBib2FyZFsxXVsxXSAmJlxyXG4gICAgICAgIGJvYXJkWzFdWzFdID09IGJvYXJkWzJdWzBdICYmXHJcbiAgICAgICAgYm9hcmRbMF1bMl0gIT0gXCIgXCJcclxuICAgICkge1xyXG4gICAgICAgIC8vIFdpbiBmcm9tIHRoZSByaWdodCA6XHJcbiAgICAgICAgbGV0IHRpbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIjAtMlwiKTtcclxuICAgICAgICB0aWxlLmNsYXNzTGlzdC5hZGQoXCJ3aW5uZXJcIik7XHJcblxyXG4gICAgICAgIC8vIFdpbiBmcm9tIHRoZSBtaWRkbGUgOlxyXG4gICAgICAgIHRpbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIjEtMVwiKTtcclxuICAgICAgICB0aWxlLmNsYXNzTGlzdC5hZGQoXCJ3aW5uZXJcIik7XHJcblxyXG4gICAgICAgIC8vIFdpbiBmcm9tIHRoZSBsZWZ0IDpcclxuICAgICAgICB0aWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCIyLTBcIik7XHJcbiAgICAgICAgdGlsZS5jbGFzc0xpc3QuYWRkKFwid2lubmVyXCIpO1xyXG5cclxuICAgICAgICBnYW1lT3ZlciA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
